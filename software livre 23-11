poo em python, advanced poo em python
hash 
virtual env
functional programming


montar web server com django ou flask - michael greenberg book

comandos:
	criar novo diretorio - mkdir <nom>
	mudar o diretorio de trabalho cd <...>
	criar o virtual env com virtualenv 
	ativar o virtual env com . env/bin/activate
	pip install flask
	...
	flask run
	sudo apt install python3-virtualenv

	emacs app.py
	export FLASK_APP = app.py(nome do programa a ser rodado)
	flask run :: resposta seria a porta IP onde o flask está rodando
	http://localhost:5000

	para teste: 

	POST /myapp HTTP/2
	Host: 'localhost'
	Content-type: application/json
	User-Agent: firefox.... (verificar adequadamente qual é o user-agent, muda de browser para browser, existem algumas incompatibilidades entre diferentes navegadores)
	Content-Length: 22

	{"fact": 5, "fib": 6}	

num editor de texto/ide:

	from flask import Flask
	import json ( se n estiver instalado, pip install json)

	app = Flask(__name__)
	
	s = '{"field": "value1", "other_field": "value2"}'

	di = json.load(s)

	print(f'di={di}') //print de todo o json di
	print(f'di.field={di["field"]}') //print de apenas um campo do json

	json.dumps(di)


	@app.route('/') //function decorators ou funçao lambda q vai encapsular a função 
	@app.route('/index') //os decoradores de funçoes vem imediatamente acima da funçao em questao
	def index():
		return 'Hello World'

	@app.route('/myapi', methods=['POST']) //definiçao de quais métodos https estão disponíveis na api
	def myapi():
	
		
tarefa: fazer uma api para calcular fibonacci

	post -> json -> fact:n, fib:n
	post -> return -> fact:n!
	fib: fib(n)
